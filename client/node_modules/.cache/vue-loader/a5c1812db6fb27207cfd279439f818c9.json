{"remainingRequest":"/Users/jakobbach/Documents/bzmining/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jakobbach/Documents/bzmining/client/src/components/chart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/jakobbach/Documents/bzmining/client/src/components/chart.vue","mtime":1589639722658},{"path":"/Users/jakobbach/Documents/bzmining/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakobbach/Documents/bzmining/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jakobbach/Documents/bzmining/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jakobbach/Documents/bzmining/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakobbach/Documents/bzmining/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKcGF0aCB7CiAgICBzdHJva2U6IHN0ZWVsYmx1ZTsKICAgIHN0cm9rZS13aWR0aDogMjsKICAgIGZpbGw6IG5vbmU7Cn0KLmF4aXMgcGF0aCwKLmF4aXMgbGluZSB7CiAgICBmaWxsOiBub25lOwogICAgc3Ryb2tlOiBncmV5OwogICAgc3Ryb2tlLXdpZHRoOiAxOwogICAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzOwp9Cg=="},{"version":3,"sources":["chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"chart.vue","sourceRoot":"src/components","sourcesContent":["/* eslint-disable */\n\n<template>\n  <svg>\n  </svg>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  props: ['articlesattribute'],\n  data() {\n    return {\n      chart: null,\n    };\n  },\n  watch: {\n    articlesattribute(val) {\n      console.log(val);\n      if (this.chart != null) {\n        this.chart.remove();\n        console.log('chart is not null, so the chart has to be removed.');\n      } else  {\n        console.log('chart is null, so create the chart completely new.');\n      }\n      this.renderChart(val);\n    },\n  },\n  methods: {\n    renderChart(articlesinput) {\n      // Set the dimensions of the canvas / graph\n      const margin = {\n        top: 30, right: 20, bottom: 30, left: 50,\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 270 - margin.top - margin.bottom;\n\n      // Parse the date / time\n      const parseDate = d3.time.format('%Y-%m-%d').parse;\n\n      // Set the ranges\n      const x = d3.time.scale().range([0, width]);\n      const y = d3.scale.linear().range([height, 0]);\n\n      // Define the axes\n      const xAxis = d3.svg.axis().scale(x)\n        .orient('bottom').ticks(5);\n\n      const yAxis = d3.svg.axis().scale(y)\n        .orient('left').ticks(5);\n\n      // Define the line\n      const valueline = d3.svg.line()\n        .x((d) => x(d.date))\n        .y((d) => y(d.count));\n\n      const svg = d3\n        .select('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom);\n      // Adds the svg canvas\n\n      this.chart = svg\n        .append('g')\n        .attr('transform',\n          `translate(${margin.left},${margin.top})`);\n\n      // Get the data\n      articlesinput.forEach((d) => {\n        d.date = parseDate(d.date);\n        d.count = +d.count;\n      });\n\n      // Scale the range of the data\n      x.domain(d3.extent(articlesinput, (d) => d.date));\n      y.domain([0, d3.max(articlesinput, (d) => d.count)]);\n\n      // Add the valueline path.\n      this.chart.append('path')\n        .attr('class', 'line')\n        .attr('d', valueline(articlesinput));\n\n      // Add the X Axis\n      this.chart.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0,${height})`)\n        .call(xAxis);\n\n      // Add the Y Axis\n      this.chart.append('g')\n        .attr('class', 'y axis')\n        .call(yAxis);\n    },\n  },\n};\n</script>\n\n<style>\npath {\n    stroke: steelblue;\n    stroke-width: 2;\n    fill: none;\n}\n.axis path,\n.axis line {\n    fill: none;\n    stroke: grey;\n    stroke-width: 1;\n    shape-rendering: crispEdges;\n}\n</style>\n\n/* eslint-disable camelcase */\n"]}]}